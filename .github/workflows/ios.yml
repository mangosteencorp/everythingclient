name: iOS starter workflow

on:
  push:
    branches: [ "main", "dev", "cicd" ]
  pull_request:
    branches: [ "main", "dev", "cicd" ]
  workflow_dispatch:
jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-13

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select latest Xcode
        run: |
          XCODE_LIST=$(ls -d /Applications/Xcode*.app)
          LATEST_XCODE=$(echo "$XCODE_LIST" | sort -V | tail -n 1)
          echo "Using Xcode: $LATEST_XCODE"
          sudo xcode-select -switch "$LATEST_XCODE"
      - name: Check environment
        run: |
          swift --version
          xcodebuild -version
          xcrun xctrace list devices 2>&1
      - name: Configure Xcode DerivedData path
        run: |
          defaults write com.apple.dt.Xcode IDECustomDerivedDataLocation "./.DerivedData"
      - name: Set up secrets in xcconfig
        run: |
          echo "TMDB_API_KEY=${{ secrets.API_KEY }}" >> Rebuild/Rebuild/Build.xcconfig
          echo "PRODUCT_BUNDLE_IDENTIFIER=com.openmangosteen.everythingclient" >> Rebuild/Rebuild/Build.xcconfig
      - name: Set Default Scheme
        run: |
          pwd
          ls -la
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          echo $scheme_list
          if echo $scheme_list | grep -q "workspace"; then
            default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['workspace']['schemes'][2]" || echo "Rebuild")
          else
            default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]" || echo "Rebuild")
          fi
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          echo $device
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test with coverage
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          echo $device
          chmod +x ./.github/scripts/test.sh
          sh ./.github/scripts/test.sh

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .output/coverage_report.txt
          retention-days: 14
